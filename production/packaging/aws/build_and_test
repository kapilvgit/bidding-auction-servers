#!/bin/bash
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o pipefail
set -o errexit
export TZ=Etc/UTC
export PS4='+\tZ $(basename ${BASH_SOURCE[0]}):${LINENO} ' # xtrace prompt

START=$(date +%s)

trap _print_runtime EXIT
function _print_runtime() {
  local -r -i STATUS=$?
  local -i END
  END=$(date +%s)
  /usr/bin/env LC_ALL=en_US.UTF-8 printf "\naws/build_and_test runtime: %'ds\n" $((END - START)) >/dev/stderr
  # shellcheck disable=SC2086
  exit ${STATUS}
}

function usage() {
  local exitval=${1-1}
  cat >&2 << USAGE
usage:
  $0 <options>
    --without-shared-cache       Containers will not mount ${HOME}/.cache/bazel
    --server-image <image.tar>   Server docker image tarfile
    --service-path               [REQUIRED] One of: auction_service, bidding_service, buyer_frontend_service, seller_frontend_service
    --with-ami                   AMI region in which to build and store AWS AMIs. Use multiple times to specify more than one region

environment variables (all optional):
    WORKSPACE                    Set the path to the workspace (repo root)
    BAZEL_STARTUP_ARGS           Additional startup arguments to pass to bazel invocations
    BAZEL_EXTRA_ARGS             Additional command arguments to pass to bazel invocations
    CBUILD_ARGS                  Additional command-line arguments to cbuild
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

declare -a AMI_REGIONS
declare BUILD_FLAVOR=prod

while [[ $# -gt 0 ]]; do
  case "$1" in
    --server-image)
      SERVER_IMAGE="$2"
      shift
      shift
      ;;
    --service-path)
      SERVICE="$2"
      shift
      shift
      ;;
    --with-ami)
      AMI_REGIONS+=("$2")
      shift
      shift
      ;;
    --verbose)
      set -o xtrace
      shift
      ;;
    --build-flavor)
      BUILD_FLAVOR="$2"
      shift 2 || usage
      ;;
    -h | --help)
      usage 0
      break
      ;;
    *)
      usage
      break
      ;;
  esac
done

function arr_to_string_list() {
  declare -r -n arr=$1
  printf -v joined '"%s",' "${arr[@]}"
  printf "[%s]" "${joined%,}"
}

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
# shellcheck source=builders/tools/builder.sh
source "${SCRIPT_DIR}"/../../../builders/tools/builder.sh
DIST="${WORKSPACE}"/dist

mkdir -p "${DIST}"/aws
chmod 770 "${DIST}" "${DIST}"/aws

printf "==== build AWS artifacts using build-amazonlinux2 =====\n"
# build nitro enclave image, collect eif artifacts
readonly IMAGE_URI=bazel/production/packaging/aws/${SERVICE}
IMAGE_TAG=$(mktemp --dry-run temp-XXXXXX)
readonly ENCLAVE_NAME=${SERVICE}
builder::cbuild_al2 $"
set -o errexit
# extract server docker image into local docker client and retag it
docker load -i ${SERVER_IMAGE}
docker tag ${IMAGE_URI}:server_docker_image ${IMAGE_URI}:${IMAGE_TAG}
nitro-cli build-enclave \
  --docker-uri ${IMAGE_URI}:${IMAGE_TAG} \
  --output-file /tmp/${ENCLAVE_NAME}.eif \
  > /tmp/${ENCLAVE_NAME}_${BUILD_FLAVOR}.json
if [[ $? -eq 0 ]]; then
  mv /tmp/${ENCLAVE_NAME}.* dist/aws/
  mv /tmp/${ENCLAVE_NAME}_${BUILD_FLAVOR}.* dist/aws/
fi
"
docker image rm "${IMAGE_URI}:${IMAGE_TAG}"

builder::cbuild_al2 $"
trap _collect_logs EXIT
function _collect_logs() {
  local -r -i STATUS=\$?
  printf 'Collecting bazel logs...\n' &>/dev/stderr
  bazel ${BAZEL_STARTUP_ARGS} run ${BAZEL_EXTRA_ARGS} //:collect-logs
  exit \${STATUS}
}
set -o errexit
bazel ${BAZEL_STARTUP_ARGS} run ${BAZEL_EXTRA_ARGS} //production/packaging/aws/common/ami:copy_to_dist
"
"${WORKSPACE}"/builders/tools/normalize-dist

if [[ -n ${AMI_REGIONS[0]} ]]; then
  unzip -o -d "${DIST}"/aws "${DIST}"/aws/nonenclave_artifacts.zip
  printf "==== build AWS AMI (using packer) =====\n"
  regions="$(arr_to_string_list AMI_REGIONS)"
  builder::cbuild_al2 "
set -o errexit
packer build -var=regions='${regions}' -var=service=${SERVICE} -var=commit_version=$(git rev-parse HEAD) -var=distribution_dir=dist/aws -var=workspace=/src/workspace production/packaging/aws/common/ami/image.pkr.hcl
"
fi
