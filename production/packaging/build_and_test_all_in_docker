#!/bin/bash
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o pipefail
set -o errexit
export TZ=Etc/UTC
export PS4='+\tZ $(basename ${BASH_SOURCE[0]}):${LINENO} ' # xtrace prompt

START=$(date +%s)

trap _print_runtime EXIT
function _print_runtime() {
  declare -r -i STATUS=$?
  declare -r END=$(date +%s)
  /usr/bin/env LC_ALL=en_US.UTF-8 printf "\nbuild_and_test_all_in_docker runtime: %'ds\n" $((END - START)) >/dev/stderr
  if [[ ${STATUS} -eq 0 ]]; then
    printf "build_and_test_in_docker completed successfully\n" &>/dev/stderr
  else
    printf "Error: build_and_test_in_docker completed with status code: %s\n" "${STATUS}" &>/dev/stderr
    if [[ -v KOKORO_ARTIFACTS_DIR ]]; then
      sleep 5s
    fi
  fi
  exit ${STATUS}
}

declare -a SERVICES
declare INSTANCE
declare BUILD_FLAVOR=prod
declare PLATFORM
declare -i VERBOSE=0
declare VERBOSE_ARG=
declare -i PRECOMMIT_ONLY=0
declare -i SKIP_PRECOMMIT=0
declare -i NO_TESTS=0
declare -a AMI_REGIONS
declare GCP_IMAGE_TAG
declare GCP_IMAGE_REPO

function usage() {
  local -i -r exitval=${1-1}
  cat >&2 <<USAGE
usage:
  $0 <options>
    --service-path               [REQUIRED] Recognized values: auction_service, bidding_service, buyer_frontend_service, seller_frontend_service.
                                   Use multiple times to specify more than one service.
    --instance                   [REQUIRED] Recognized values: local, aws
    --platform                   [REQUIRED] Recognized values: gcp, aws
    --build-flavor               Recognized values: prod, non_prod. Default: prod
                                   Use non_prod to enable verbose logging.
    --precommit-only             Run precommit then exit
    --no-precommit               Skip precommit checks
    --no-tests                   Skip tests
    --with-ami                   AMI region in which to build and store AWS AMIs.
                                   Use multiple times to specify more than one region.
                                   If empty or not specified, none will be built.
    --verbose                    Enable verbose output

If platform is gcp:
    --gcp-image-tag              [REQUIRED] (All lowercase) Custom image tag for GCP image.
    --gcp-image-repo             [REQUIRED] Used to identify the target repo for TEE image upload. Exmample: us-docker.pkg.dev/my-project-id/services

environment variables (all optional):
    WORKSPACE                    Set the path to the workspace (repo root)
    BAZEL_STARTUP_ARGS           Additional startup arguments to pass to bazel invocations
    BAZEL_EXTRA_ARGS             Additional command arguments to pass to bazel invocations
    EXTRA_DOCKER_RUN_ARGS        Additional arguments to pass to docker run invocations
USAGE
  exit ${exitval}
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --precommit-only)
      PRECOMMIT_ONLY=1
      shift
      ;;
    --no-tests)
      NO_TESTS=1
      shift
      ;;
    --no-precommit)
      SKIP_PRECOMMIT=1
      shift
      ;;
    --with-ami)
      AMI_REGIONS+=("$2")
      shift 2 || usage
      ;;
    --service-path)
      SERVICES+=("$2")
      shift 2 || usage
      ;;
    --instance)
      INSTANCE="$2"
      shift 2 || usage
      ;;
    --build-flavor)
      BUILD_FLAVOR="$2"
      shift 2 || usage
      ;;
    --platform)
      PLATFORM="$2"
      shift 2 || usage
      ;;
    --gcp-image-tag)
      GCP_IMAGE_TAG="$2"
      shift 2 || usage
      ;;
    --gcp-image-repo)
      GCP_IMAGE_REPO="$2"
      shift 2 || usage
      ;;
    --verbose)
      VERBOSE=1
      shift
      ;;
    -h | --help) usage 0 ;;
    *) usage ;;
  esac
done

if [[ ${#SERVICES[@]} -eq 0 ]]; then
  printf "Error: A minimum of one --service-path must be specified\n" &>/dev/stderr
  usage
fi
if [[ -z ${PLATFORM} ]]; then
  printf "Error: --platform must be specified\n" &>/dev/stderr
  usage
fi
if [[ -z ${INSTANCE} ]]; then
  printf "Error: --instance must be specified\n" &>/dev/stderr
  usage
fi
if [[ ${PLATFORM} = gcp ]]; then
  if [[ -z ${GCP_IMAGE_TAG} ]]; then
    printf "Error: --gcp-image-tag must be specified\n" &>/dev/stderr
    usage
  fi
  if [[ -z ${GCP_IMAGE_REPO} ]]; then
    printf "Error: --gcp-image-repo must be specified\n" &>/dev/stderr
    usage
  fi
fi

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
# shellcheck source=builders/tools/builder.sh
source "${SCRIPT_DIR}"/../../builders/tools/builder.sh

if [[ -n ${AMI_REGIONS[0]} ]]; then
  if [[ ${PLATFORM} != "aws" ]]; then
    printf "Cannot use AMI regions if platform != aws\n"
    exit 1
  fi
  if [[ ${INSTANCE} != aws ]]; then
    printf "Error: Expecting --instance=aws when AMI region is specified\n"
    exit 1
  fi
fi
BAZEL_EXTRA_ARGS="${BAZEL_EXTRA_ARGS} --config=${INSTANCE}_${PLATFORM} --//:build_flavor=${BUILD_FLAVOR}"

if [[ ${VERBOSE} -eq 1 ]]; then
  set -o xtrace
  VERBOSE_ARG="--verbose"
  CBUILD_ARGS="${CBUILD_ARGS} --verbose"
fi

if [[ ${SKIP_PRECOMMIT} -eq 0 ]]; then
  "${WORKSPACE}"/builders/tools/pre-commit
fi
if [[ ${PRECOMMIT_ONLY} -eq 1 ]]; then
  exit 0
fi

printf "==== build and test specified platform=%s, instance=%s build_flavor=%s targets using bazel-debian for: %s ====\n" "${PLATFORM}" "${INSTANCE}" "${BUILD_FLAVOR}" "${SERVICES[*]}"

declare -a BUILD_TARGETS
declare -a TEST_TARGETS
for SERVICE in "${SERVICES[@]}"; do
  BUILD_TARGETS+=(
    "//production/packaging/${PLATFORM}/${SERVICE}/..."
  )
  TEST_TARGETS+=(
    "//services/${SERVICE}/..."
    "//production/packaging/${PLATFORM}/${SERVICE}/..."
  )
done

TEST_TARGETS+=(
  "//services/common/..."
  "//tools/secure_invoke/..."
)

BUILD_TARGETS+=(
  "//tools/secure_invoke/..."
)

CBUILD_ARGS="--verbose"
declare -r _BUILD_TARGETS="${BUILD_TARGETS[*]}"
declare -r _TEST_TARGETS="${TEST_TARGETS[*]}"

builder::cbuild_debian "
trap _collect_logs EXIT
function _collect_logs() {
  local -r -i STATUS=\$?
  printf 'Collecting bazel logs... (status: %d)\n' \${STATUS} &>/dev/stderr
  bazel ${BAZEL_STARTUP_ARGS} run ${BAZEL_EXTRA_ARGS} //:collect-logs
  exit \${STATUS}
}
set -o errexit

if [[ ${NO_TESTS} -eq 0 ]]; then
  bazel ${BAZEL_STARTUP_ARGS} test ${BAZEL_EXTRA_ARGS} --build_tests_only --config=coretests ${_TEST_TARGETS}
fi
bazel ${BAZEL_STARTUP_ARGS} build ${BAZEL_EXTRA_ARGS} ${_BUILD_TARGETS}
for svc in ${SERVICES[*]}; do
  bazel ${BAZEL_STARTUP_ARGS} run ${BAZEL_EXTRA_ARGS} //production/packaging/${PLATFORM}/\${svc}:copy_to_dist
done
"

readonly DIST="${WORKSPACE}"/dist

if [[ ${PLATFORM} = "aws" ]]; then
  declare -a EXTRA_ARGS
  for region in "${AMI_REGIONS[@]}"; do
    EXTRA_ARGS+=(--with-ami "${region}")
  done
  if [[ ${VERBOSE} -eq 1 ]]; then
    EXTRA_ARGS+=("--verbose")
  fi

  function build_service_for_aws() {
    declare -r SERVICE="$1"
    # note: use relative path to dist
    declare -r DOCKER_IMAGE=dist/debian/${SERVICE}_image.tar
    if ! [[ -s ${WORKSPACE}/${DOCKER_IMAGE} ]]; then
      printf "Error: docker image tar file not found: %s\n" "${DOCKER_IMAGE}" &>/dev/stderr
      exit 1
    fi
    # shellcheck disable=SC2086
    "${SCRIPT_DIR}"/aws/build_and_test ${VERBOSE_ARG} --server-image "${DOCKER_IMAGE}" --service-path "${SERVICE}" --build-flavor ${BUILD_FLAVOR} "${EXTRA_ARGS[@]}"
  }

  for svc in "${SERVICES[@]}"; do
    build_service_for_aws "${svc}"
  done
fi

if [[ ${PLATFORM} = "gcp" ]]; then
  function build_service_for_gcp() {
    declare -r SERVICE="$1"
    # note: use relative path to dist
    declare -r DOCKER_IMAGE=dist/debian/${SERVICE}_image.tar
    if ! [[ -s ${WORKSPACE}/${DOCKER_IMAGE} ]]; then
      printf "Error: docker image tar file not found: %s\n" "${DOCKER_IMAGE}" &>/dev/stderr
      exit 1
    fi
    # shellcheck disable=SC2086
    "${SCRIPT_DIR}"/gcp/build_and_test ${VERBOSE_ARG} \
    --server-image "${DOCKER_IMAGE}" \
    --service-path "${SERVICE}" \
    --gcp-image-tag "${GCP_IMAGE_TAG}" \
    --gcp-image-repo "${GCP_IMAGE_REPO}"
  }

  for svc in "${SERVICES[@]}"; do
    build_service_for_gcp "${svc}"
  done
fi


if [[ -d ${DIST} ]]; then
  printf "build artifacts:\n"
  ls -lhR "${DIST}"
else
  printf "dir not found: [%s]\n" "${DIST}"
fi
